po <- ggplot(cs.melt, aes(x=reorder(City, zeros.sort),y=Score,  fill = factor(bucket)) ) + geom_bar(stat="identity")
po
zeros.sort$City
po <- ggplot(cs.melt, aes(x=zeros.sort$City, y=Score,  fill = factor(bucket)) ) + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
po <- ggplot(cs.melt, aes(x=City, y=Score,  fill = factor(bucket)) ) + geom_bar(stat="identity",levels=zeros.sort$City)
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
po <- ggplot(cs.melt, aes(x=City, y=Score,  levels=zeros.sort$City, fill = factor(bucket)) )
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
po <- ggplot(cs.melt, aes(x=reorder(City, Score),y=Score,  fill = factor(bucket)) ) + geom_bar(stat="identity")
po <- ggplot(cs.melt, aes(x=City, y=Score, fill = factor(bucket)) )
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature", levels=zeros.sort$City)
po
po <- ggplot(cs.melt, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
po<-  po + xlab("City")
po
po <- ggplot(cs.melt, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
rm(list=ls())
outputDir.path <- file.path("~/Py Library/Wx")
setwd(outputDir.path)
getwd()
#Using ggplot2 to create the plot
require(ggplot2)
library(reshape)
#read the cumulative scores data
cityscore <-read.csv("data/city_scores_curves.csv")
names(cityscore)
head(cityscore)
#clean up the data frame by getting rid of a few columns
cs <- cityscore[-c(2,3,5,7,9)]
cs
names(cs)[1] <- "bucket"
names(cs)[2] <- "SCHAUM"
names(cs)[3] <- "RIC"
names(cs)[4] <- "SVALE"
names(cs)[5] <- "MIAMI"
#In order to plot STACKED BARPLOTS, the data frame has to be melted
# melt the dataframe so that each measured variable is its own row
cs.melt <- melt(cs, id="bucket")
names(cs.melt)[2] = "City"
names(cs.melt)[3] = "Score"
#verify
cs.melt
head(cs.melt)
names(cs.melt)
#Rename each cell in df with bucket =100 to be hi.
#reason for doing this is that the string "100" gets sorted between "10" and "20", which we don't want
cs.melt[cs.melt$bucket=='100',]$bucket = "hi"
cs.melt[cs.melt$bucket=='hi',]
#first, we take one reading for each city, its 0 bucket score
zeros <- subset(cs.melt, bucket=="0")
#reorder the rows by the scores.
zeros.sort<- zeros[order(zeros$Score),]
# zeros.sort$City becomes the ordering we want
#Using RampPalette to choose a suitable color range
#redgreenrange<-colorRampPalette(c('red', 'green'))
# Using a slightly muted green
redgreenrange<-colorRampPalette(rgb(1,0,0), rgb(0,0.7,0) )
#we plot the x as a factor, sorted by the "0" bucket score
po <- ggplot(cs.melt, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
redgreenrange<-colorRampPalette(rgb(1,0,0), rgb(0,0.7,0) )
redgreenrange<-colorRampPalette(c('red', 'green'))
redgreenrange<-colorRampPalette(rgb(1,0,0), rgb(0,0.7,0) )
redgreenrange<-colorRampPalette(c(rgb(1,0,0), rgb(0,0.7,0) ))
#we plot the x as a factor, sorted by the "0" bucket score
po <- ggplot(cs.melt, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
#### Now let's try to center the graph around a score of 50
#0-40 goes to one side, 50-100 goes above center line
lowbuckets = c("0",'10','20','30','40')
#subset the lower half of the dataframe, rows with small scores
lowcs = subset(cs.melt,bucket %in% lowbuckets)
#Group that smaller df, by one row per City, score is sum of the scores. 100-x becomes the offset
#create a subset of df, one for each city, with score = 100-low_scores, and call that bucket "-"
newcs <- ddply(lowcs, .(City), summarize, Score = 100-sum(Score), bucket="-"  )
newcs <- rbind(newcs,cs.melt)
newcs
#we plot the x as a factor, sorted by the "0" bucket score
po <- ggplot(newcs, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
newc <- ddply(lowcs, .(City), summarize, Score = 100-sum(Score), bucket="-"  )
newcs <- rbind(newc,cs.melt)
newcs
newc$City
newc[order(newc$Score)]
newc[order(newc$Score),]
newc[order(newc$Score),]$City
ddply(cs.melt,.(City),summarize,Score)
ddply(cs.melt,.(City),summarize,sum(Score))
newc[order(newc$Score),]$City
newc <- ddply(lowcs, .(City), summarize, Score = 100-sum(Score), bucket="-"  )
newcs <- rbind(newc,cs.melt)
newcs
newc[order(newc$Score),]$City
po <- ggplot(newcs, aes(x=factor(City,levels=newc[order(newc$Score),]$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
po <- ggplot(cs.melt, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
po <- ggplot(newcs, aes(x=factor(City,levels=newc[order(newc$Score),]$City), y=Score, fill = factor(bucket)) )
po <- ggplot(newcs, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
po <- ggplot(newcs, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores (sorted by Increasing 0-score bucket size)")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
po <- ggplot(newcs, aes(x=factor(City,levels=zeros.sort$City), y=(Score/2), fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores (sorted by Increasing 0-score bucket size)")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
po <- ggplot(newcs, aes(x=factor(City,levels=newc[order(newc$Score),]$City), y=Score, fill = factor(bucket)) )
po <- ggplot(newcs, aes(x=factor(City,levels=zeros.sort$City), y=(Score-100), fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores (sorted by Increasing 0-score bucket size)")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
po <- ggplot(newcs, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores (sorted by Increasing 0-score bucket size)")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
po<- po + scale_y_continuous(labels = percent)
po<- po + scale_y_continuous(labels = c(0,100))
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
po<- po + scale_y_discrete(labels = c(0,100))
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
po<- po + scale_y_discrete(labels = c(0,50,100))
po
seq(0,1,0.1)
po<- po + scale_y_discrete(labels = seq(0,100,10))
po
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
po <- ggplot(newcs, aes(x=factor(City,levels=newc[order(newc$Score),]$City), y=Score, fill = factor(bucket)) )
po <- ggplot(newcs, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores (sorted by Increasing 0-score bucket size)")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = c(rgb(1,1,1),redgreenrange(11)), name="Temperature")
po
cityscore <-read.csv("data/city_scores_curves.csv")
names(cityscore)
head(cityscore)
#clean up the data frame by getting rid of a few columns
cs <- cityscore[-c(2,3,5,7,9)]
cs
names(cs)[1] <- "bucket"
names(cs)[2] <- "SCHAUM"
names(cs)[3] <- "RIC"
names(cs)[4] <- "SVALE"
names(cs)[5] <- "MIAMI"
#In order to plot STACKED BARPLOTS, the data frame has to be melted
# melt the dataframe so that each measured variable is its own row
cs.melt <- melt(cs, id="bucket")
names(cs.melt)[2] = "City"
names(cs.melt)[3] = "Score"
cs.melt
redgreenrange<-colorRampPalette(c(rgb(1,0,0), rgb(0,0.7,0) ))
#we plot the x as a factor, sorted by the "0" bucket score
po <- ggplot(cs.melt, aes(x=factor(City,levels=zeros.sort$City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
po <- ggplot(cs.melt, aes(x=factor(City), y=Score, fill = factor(bucket)) )
po<-  po + xlab("City Temperature Scores")
po<-  po + geom_bar(stat="identity")
po <- po + scale_fill_manual(values = redgreenrange(11), name="Temperature")
po
rm(list=ls())
#PC
#outputDir.path <- file.path("~/RStats/Source Code Web Scraping")
#mac
outputDir.path <- file.path("~/Python/Wx")
setwd(outputDir.path)
getwd()
library('ggplot2')
library('plyr')
# A couple of other functions have to compiled first for this to work
source("sub_data_fetch_routines.R")
# output: gzipped file with stationname.csv
#Dependencies: is_Station_Data_Available, wunder_station_daily
writeToFile_Wx_data_for_date_range <- function(stuple, airpFlag, start_date, end_date) {
station <- stuple[1] #wunderground code of the station
stname <- stuple[2] #common name of the station
validity = is_Station_Data_Available(station, airpFlag, start_date, end_date)
if (validity==0){
print("Station data not available.")
return(0) #returning a NULL to signal no data
}
date.range <- seq.Date(from=as.Date(start_date), to=as.Date(end_date), by='1 day')
print(station)
# pre-allocate list
l <- vector(mode='list', length=length(date.range))
# loop over dates, and fetch data
for(i in seq_along(date.range))
{
#print (station)
print( date.range[i])
# print(station, date.range[i])
l[[i]] <- wunder_station_daily(station, airpFlag, date.range[i])
#print(l[[i]])
}
# stack elements of list into DF, filling missing columns with NA
d <- ldply(l, .inform=TRUE)
#print(d)
#keep only the first two columns (time and temp)
d <- d[,1:2]
#remove space, tabs and newlines from stname. "Las Vegas" becomes LasVegas.
stname <- gsub("\\s",'', stname , fixed=TRUE)
outFileName = paste(stname, "csv","gz", sep='.')
# save to CSV
write.csv(d, file=gzfile(outFileName), row.names=FALSE)
print(outFileName)
outFileName
getwd()
}
start_date = '2011-09-23'
end_date = '2011-09-29'
airpFlag = 1
start_date; end_date
lst = list("KSEA","KHOU","KPHX","KDEN","KBOS","KNYC","KLAS")
common_name = list("Seattle", "Houston", "Phoenix", "Denver", "Boston", "NYC", "Las Vegas")
citydf <- data.frame(lst,common_name)
apply(cdf,1,is_Station_Data_Available, airpFlag, start_date, end_date)
cdf <- data.frame(lst,common_name)
apply(cdf,1,is_Station_Data_Available, airpFlag, start_date, end_date)
cdf
source("sub_data_fetch_routines.R")
apply(cdf,1,is_Station_Data_Available, airpFlag, start_date, end_date)
source("sub_data_fetch_routines.R")
lst = list("KSEA","KHOU","KPHX","KDEN","KBOS","KNYC","KLAS")
apply(lst,is_Station_Data_Available, airpFlag, start_date, end_date)
airpFlag = 1
apply(lst,is_Station_Data_Available, airpFlag, start_date, end_date)
lst = list("KSEA","KHOU","KPHX","KDEN","KBOS","KNYC","KLAS")
apply(lst, is_Station_Data_Available, airpFlag, start_date, end_date)
lst
apply(lst, is_Station_Data_Available, airpFlag, start_date, end_date)
apply(lst,print)
lapply(lst, is_Station_Data_Available, airpFlag, start_date, end_date)
apply(cdf,1, writeToFile_Wx_data_for_date_range, airpFlag, start_date, end_date)
writeToFile_Wx_data_for_date_range(cdf[1,], airpFlag, start_date, end_date)
cdf
cdf[1,]
lst = c("KSEA","KHOU","KPHX","KDEN","KBOS","KNYC","KLAS")
lst2 = list("WSAP", "VIDP", "VOMM","VABB", "WMKK","YBBN")
common_name = c("Seattle", "Houston", "Phoenix", "Denver", "Boston", "NYC", "Las Vegas")
cdf <- data.frame(lst,common_name)
cdf[1,]
writeToFile_Wx_data_for_date_range(cdf[1,], airpFlag, start_date, end_date)
cdf <- data.frame(lst,common_name)
cdf
apply(cdf,1, writeToFile_Wx_data_for_date_range, airpFlag, start_date, end_date)
source("sub_data_fetch_routines.R")
apply(cdf,1, is_Station_Data_Available, airpFlag, start_date, end_date)
source("sub_data_fetch_routines.R")
apply(cdf,1, is_Station_Data_Available, airpFlag, start_date, end_date)
apply(cdf,1, writeToFile_Wx_data_for_date_range, airpFlag, start_date, end_date)
start_date = '2011-01-01'
end_date = '2011-12-31'
airpFlag = 1
start_date; end_date
apply(cdf,1, writeToFile_Wx_data_for_date_range, airpFlag, start_date, end_date)
install.packages("ggmap")
library(ggmap)
library(ggplot2)
library(plyr)
library(ggmap)
rm(list=ls())
#PC
outputDir.path <- file.path("~/Py Library/Wx/data")
#mac
#outputDir.path <- file.path("~/Python/Wx")
setwd(outputDir.path)
getwd()
cityscore <-read.csv("out_city_final.csv")
cityscore
cityscore <-read.csv("out_city_final.csv")
#verify load
cityscore
cityscore <-read.csv("out_city_final.csv")
#verify load
cityscore
cityscore <-read.csv("out_city_final.csv")
cityscore
cityscore <-read.csv("out_city_final.csv")
cityscore
cityscore <-read.csv("out_city_final.csv")
cityscore
names(cityscore)
mp <- get_map(location = 'Europe', zoom = 4)
ggmap(map)
ggmap(mp)
library(mapproj)
install.packages("mapproj")
library(mapproj)
mp <- get_map(location = 'Europe', zoom = 4)
ggmap(mp)
mp <- get_map(location = 'Europe', zoom = 4)
ggmap(mp)
al1 = get_map(location = 'USA', zoom = 4, maptype = 'roadmap')
al1MAP = ggmap(al1)
al1MAP
al1 = get_map(location = 'USA', zoom = 3, maptype = 'roadmap')
al1MAP = ggmap(al1)
al1MAP
al1 = get_map(location = 'USA', zoom = 7, maptype = 'roadmap')
al1MAP = ggmap(al1)
al1MAP
al1 = get_map(location = 'USA', zoom = 6, maptype = 'roadmap')
al1MAP = ggmap(al1)
al1MAP
al1 = get_map(location = 'USA', zoom = 5, maptype = 'roadmap')
al1MAP = ggmap(al1)
al1MAP
al1 = get_map(location = 'USA', zoom = 4, maptype = 'roadmap')
al1MAP = ggmap(al1)
al1MAP
?ggmap
mp = get_map(location = 'USA', zoom = 4, maptype = 'toner')
ggmap(mp)
mtype = "watercolor"
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
ggmap(mp)
mtype = "roadmap"
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
ggmap(mp)
mp <- ggmap(mp)
mp
?geocode
iad = geocode("Houston, TX")
iah = geocode("Houston, TX")
iah
mp<- mp+ geom_point(iah)
mp<- mp+ geom_point(aes(x=iah$lon, y=iah$lat, color="red")
mp
mp<- mp+ geom_point(aes(x=iah$lon, y=iah$lat, color="red"))
mp
cityscore$city
cityscore$City
ll = geocode(cityscore$city)
lapply(cityscore$City, geocode)
cities <- cityscore$City
cities
cities <- as.character(cityscore$City)
cities
ll = geocode(cities)
ll
cityscore <-read.csv("out_city_final.csv")
#verify load
cityscore
cities <- as.character(cityscore$City)
cities
ll = geocode(cities)
ll
mp<- mp+ geom_point(aes(x=lon, y=lat), data=ll)
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point(aes(x=lon, y=lat), data=ll)
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll) +
scale_color_manual()
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll) +
scale_color_manual(c("red","green"))
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll)
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll)
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, colour="blue")
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, colour=cityscore$Score)
mp
mp <- mp +   scale_color_manual(c("red","green"))
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, colour=cityscore$Score)
mp <- mp +   scale_color_gradient(low='red')
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, colour=cityscore$Score) +scale_color_gradient(low='red')
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, colour=cityscore$Score) +scale_color_gradient(low='red')
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, colour=cityscore$Score) + scale_colour_gradient(low ="red")
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll) + scale_colour_gradient(low ="red")
mp <- mp+ geom_point(aes(colour = cityscore$Score))
mp
length(ll)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=cityscore$Score) + scale_colour_gradient(low ="red")
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=cityscore$Score)
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=cityscore$Score) + scale_colour_gradient()
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=cityscore$Score) + scale_colour_gradient(low="red", high="green")
mp
score <- cityscore$Score
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=score) + scale_colour_gradient(low="red", high="green")
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=score)
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll) +aes(color=score) + scale_colour_gradient(low="red", high="green")
mp
ll
score
ll = geocode(cities)
ll <- cbind(ll,score)
ll
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll) +aes(color=score) + scale_colour_gradient(low="red", high="green")
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll) +aes(color=score)
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=score)
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=score) + scale_colour_gradient(low="red", high="green")
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=score) + scale_colour_continous(low="red", high="green")
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=score) + scale_colour_continuous(low="red", high="green")
mp
mp<- mp+ geom_point( aes(x=lon, y=lat), data=ll, color=score) + scale_colour_continuous(low="red")
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( data=ll, aes(x=lon, y=lat), color=score)
mp
mp<- mp+ geom_point( data=ll, aes(x=lon, y=lat), color=score) + scale_colour_continuous(low="red")
mp
mp<- mp+ geom_point( data=ll, aes(x=lon, y=lat, color=score)) + scale_colour_continuous(low="red")
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( data=ll, aes(x=lon, y=lat, color=score)) + scale_colour_continuous(low="red", high="green")
mp
mp<- mp+ geom_point( data=ll, aes(x=lon, y=lat, color=score), size=5) + scale_colour_continuous(low="red", high="green")
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( data=ll, aes(x=lon, y=lat, color=score), size=5)
mp<- mp+  + scale_colour_continuous(low="red", high="green")
mp <- ggmap(mp)
mp<- mp+ geom_point( data=ll, aes(x=lon, y=lat, color=score), size=5)
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( data=ll, aes(x=lon, y=lat, color=score), size=5)
mp<- mp  + scale_colour_continuous(low="red", high="green")
mp
mp<- mp  + scale_colour_continuous(low="blue", high="red")
mp
mp = get_map(location = 'USA', zoom = 4, maptype = mtype)
mp <- ggmap(mp)
mp<- mp+ geom_point( data=ll, aes(x=lon, y=lat, color=score), size=5)
mp<- mp  + scale_colour_continuous(low="blue", high="orange")
mp
